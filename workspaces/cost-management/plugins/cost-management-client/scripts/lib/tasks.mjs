/* eslint-disable no-console */
import { writeFile, readdir, unlink } from 'node:fs/promises';
import { basename } from 'node:path';
import { fetchJson } from './fetch.mjs';
import { toYaml } from './yaml.mjs';
import { exec } from './exec.mjs';

function toExportStatement(filename) {
    const fileBaseName = basename(filename, '.ts');
    const alias = fileBaseName.replace(/Api\.client/, 'Api');
    return `export * as ${alias} from './generated/apis/${fileBaseName}'`;
}

async function generatePackageEntryFile({ packageRootDir }) {
    const outputFile = `${packageRootDir}/src/index.ts`;
    const generatedFilesDir = `${packageRootDir}/src/generated`;
    const generatedFiles = await readdir(`${generatedFilesDir}/apis`);
    const exportStatements = generatedFiles.map(toExportStatement);
    const content = `
${exportStatements.join('\n')}

export * from './generated/models';

`;
    await writeFile(outputFile, content);
}


export async function updateSchema({ packageRootDir, specUrl, afterDownloadCompletes = null }) {
    const spec = await fetchJson(specUrl);
    if (afterDownloadCompletes) afterDownloadCompletes(spec);

    const outputFile = `${packageRootDir}/src/schema/openapi.yaml`
    await writeFile(outputFile, toYaml(spec));
}

export async function generateClient({ cwd }) {
    await exec('yarn run -T backstage-repo-tools package schema openapi generate --client-package plugins/cost-management-client', { cwd });
    await unlink(`${cwd}/src/generated/apis/index.ts`); // This file is automatically generated. We don't need it.
    await unlink(`${cwd}/src/generated/index.ts`); // This file is automatically generated. We don't need it.
    await generatePackageEntryFile({ packageRootDir: cwd });
}
