//

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import { DiscoveryApi } from '../types/discovery';
import { FetchApi } from '../types/fetch';
import crossFetch from 'cross-fetch';
import {pluginId} from '../pluginId';
import * as parser from 'uri-template';

import { Forecast } from '../models/Forecast.model';

/**
 * Wraps the Response type to convey a type on the json call.
 *
 * @public
 */
export type TypedResponse<T> = Omit<Response, 'json'> & {
  json: () => Promise<T>;
};


/**
 * Options you can pass into a request for additional information.
 *
 * @public
 */
export interface RequestOptions {
  token?: string;
}

/**
 * no description
 */
export class ForecastsApiClient {
    private readonly discoveryApi: DiscoveryApi;
    private readonly fetchApi: FetchApi;

    constructor(options: {
        discoveryApi: { getBaseUrl(pluginId: string): Promise<string> };
        fetchApi?: { fetch: typeof fetch };
    }) {
        this.discoveryApi = options.discoveryApi;
        this.fetchApi = options.fetchApi || { fetch: crossFetch };
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsAwsCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/aws/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsAzureCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/azure/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsGcpCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/gcp/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsOciCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/oci/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsOpenshiftCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/openshift/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsOpenshiftInfrastructuresAllCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/openshift/infrastructures/all/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsOpenshiftInfrastructuresAwsCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/openshift/infrastructures/aws/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsOpenshiftInfrastructuresAzureCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/openshift/infrastructures/azure/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     */
    public async forecastsOpenshiftInfrastructuresGcpCostsGet(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Forecast >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/forecasts/openshift/infrastructures/gcp/costs/{?filter}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

}
