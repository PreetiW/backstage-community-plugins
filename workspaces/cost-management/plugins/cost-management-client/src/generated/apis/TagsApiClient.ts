//

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import { DiscoveryApi } from '../types/discovery';
import { FetchApi } from '../types/fetch';
import crossFetch from 'cross-fetch';
import {pluginId} from '../pluginId';
import * as parser from 'uri-template';

import { Tags } from '../models/Tags.model';

/**
 * Wraps the Response type to convey a type on the json call.
 *
 * @public
 */
export type TypedResponse<T> = Omit<Response, 'json'> & {
  json: () => Promise<T>;
};


/**
 * Options you can pass into a request for additional information.
 *
 * @public
 */
export interface RequestOptions {
  token?: string;
}

/**
 * no description
 */
export class TagsApiClient {
    private readonly discoveryApi: DiscoveryApi;
    private readonly fetchApi: FetchApi;

    constructor(options: {
        discoveryApi: { getBaseUrl(pluginId: string): Promise<string> };
        fetchApi?: { fetch: typeof fetch };
    }) {
        this.discoveryApi = options.discoveryApi;
        this.fetchApi = options.fetchApi || { fetch: crossFetch };
    }

    /**
     * Query to obtain AWS tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getAWSTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/aws/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain AWS tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getAWSTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/aws/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain Azure tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getAzureTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/azure/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain Azure tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getAzureTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/azure/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain GCP tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getGCPTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/gcp/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain GCP tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getGCPTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/gcp/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OCI tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOciTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/oci/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OCI tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOciTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/oci/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift-on-AWS tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftAWSTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/infrastructures/aws/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift-on-AWS tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftAWSTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/infrastructures/aws/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift-on-All tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftAllTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/infrastructures/all/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift-on-All tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftAllTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/infrastructures/all/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift-on-Azure tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftAzureTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/infrastructures/azure/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift-on-Azure tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftAzureTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/infrastructures/azure/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift-on-GCP tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftGCPTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/infrastructures/gcp/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift-on-GCP tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftGCPTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/infrastructures/gcp/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift tags
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param keyOnly Flag to indicate whether or not only the tag key values will be returned.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftTagData(
        // @ts-ignore
        request: {
            query: {
                filter?: any,
                keyOnly?: boolean,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/{?filter,key_only,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Query to obtain OpenShift tags
     * @param key The tag key to get
     * @param filter The filter to apply to the report as a URL encoded dictionary.
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned. Limit of 0 will return all data.
     */
    public async getOpenShiftTagKeyData(
        // @ts-ignore
        request: {
            path: {
                    key: string,
            },
            query: {
                filter?: any,
                offset?: number,
                limit?: number,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<Tags >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/tags/openshift/{key}{?filter,offset,limit}`;

        const uri = parser.parse(uriTemplate).expand({
            key: request.path.key,
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

}

export type TagsApi = InstanceType<typeof TagsApiClient>;
