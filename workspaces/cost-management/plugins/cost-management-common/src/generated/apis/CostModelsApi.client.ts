//

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import { DiscoveryApi } from '../types/discovery';
import { FetchApi } from '../types/fetch';
import crossFetch from 'cross-fetch';
import {pluginId} from '../pluginId';
import * as parser from 'uri-template';

import { CostModel } from '../models/CostModel.model';
import { CostModelOut } from '../models/CostModelOut.model';
import { CostModelPagination } from '../models/CostModelPagination.model';

/**
 * Wraps the Response type to convey a type on the json call.
 *
 * @public
 */
export type TypedResponse<T> = Omit<Response, 'json'> & {
  json: () => Promise<T>;
};


/**
 * Options you can pass into a request for additional information.
 *
 * @public
 */
export interface RequestOptions {
  token?: string;
}

/**
 * no description
 */
export class CostModelsApiClient {
    private readonly discoveryApi: DiscoveryApi;
    private readonly fetchApi: FetchApi;

    constructor(options: {
        discoveryApi: { getBaseUrl(pluginId: string): Promise<string> };
        fetchApi?: { fetch: typeof fetch };
    }) {
        this.discoveryApi = options.discoveryApi;
        this.fetchApi = options.fetchApi || { fetch: crossFetch };
    }

    /**
     * Create a new cost model.
     * @param costModel 
     */
    public async createCostModel(
        // @ts-ignore
        request: {
                body: CostModel,
        },
        options?: RequestOptions
    ): Promise<TypedResponse<CostModelOut >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/cost-models/`;

        const uri = parser.parse(uriTemplate).expand({
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'POST',
             body: JSON.stringify(request.body), 
        });
    }

    /**
     * Delete a Cost Model
     * @param costModelUuid UUID of Cost Model to get
     */
    public async deleteCostModel(
        // @ts-ignore
        request: {
            path: {
                    costModelUuid: string,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<void >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/cost-models/{cost_model_uuid}/`;

        const uri = parser.parse(uriTemplate).expand({
            cost_model_uuid: request.path.costModelUuid,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'DELETE',
            
        });
    }

    /**
     * Get a Cost Model.
     * @param costModelUuid UUID of Cost Model to get
     */
    public async getCostModel(
        // @ts-ignore
        request: {
            path: {
                    costModelUuid: string,
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<CostModelOut >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/cost-models/{cost_model_uuid}/`;

        const uri = parser.parse(uriTemplate).expand({
            cost_model_uuid: request.path.costModelUuid,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * List the cost models
     * @param offset Parameter for selecting the offset of data.
     * @param limit Parameter for selecting the amount of data in a returned.
     * @param sourceUuid Filter response on source uuid.
     * @param sourceType Filter response on source type.
     * @param name Filter response on cost model name.
     * @param currency Filter response on currency.
     * @param description Filter response on cost model description.
     * @param ordering Order response on cost model by allowed fields.
     */
    public async listCostModels(
        // @ts-ignore
        request: {
            query: {
                offset?: number,
                limit?: number,
                sourceUuid?: string,
                sourceType?: string,
                name?: string,
                currency?: string,
                description?: string,
                ordering?: 'name' | '-name' | 'source_type' | '-source_type' | 'updated_timestamp' | '-updated_timestamp',
            },
        },
        options?: RequestOptions
    ): Promise<TypedResponse<CostModelPagination >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/cost-models/{?offset,limit,source_uuid,source_type,name,currency,description,ordering}`;

        const uri = parser.parse(uriTemplate).expand({
            ...request.query,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'GET',
            
        });
    }

    /**
     * Update a Cost Model
     * @param costModelUuid UUID of Cost Model to get
     * @param costModel Update to a Cost Model
     */
    public async updateCostModel(
        // @ts-ignore
        request: {
            path: {
                    costModelUuid: string,
            },
                body: CostModel,
        },
        options?: RequestOptions
    ): Promise<TypedResponse<CostModelOut >> {
        const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

        const uriTemplate = `/cost-models/{cost_model_uuid}/`;

        const uri = parser.parse(uriTemplate).expand({
            cost_model_uuid: request.path.costModelUuid,
        })

        return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
            headers: {
                'Content-Type': 'application/json',
                ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
            },
            method: 'PUT',
             body: JSON.stringify(request.body), 
        });
    }

}
export type CostModelsApi = InstanceType<typeof CostModelsApiClient>;