import { isJsonArray, isJsonPrimitive } from './guards';
import type { JsonObject, JsonValue } from '@backstage/types';

type IdFn<T> = (p: T) => T;
const idFnImpl: IdFn<string> = p => p;

/**
 * Returns a new `JsonValue` with the same values as `value` and keys
 * generated by running, recursively, each own enumerable key of `value`
 * thru `iteratee`. The iteratee is invoked with the name of the key,
 * and the returned value becomes the new key name.
 *
 * @public
 * @see https://backstage.io/docs/reference/types.jsonvalue
 */
export const deepMapKeys = (
  value: unknown,
  iteratee: IdFn<string> = idFnImpl,
): JsonValue => {
  if (isJsonPrimitive(value)) {
    return value;
  }

  if (isJsonArray(value)) {
    return value.map(item => deepMapKeys(item, iteratee));
  }

  return Object.entries(value as JsonObject).reduce((accumulator, [k, v]) => {
    const newKey = iteratee(k);
    if (v === undefined) {
      accumulator[newKey] = null;
    } else {
      accumulator[newKey] = deepMapKeys(v, iteratee);
    }

    return accumulator;
  }, {} as JsonObject);
};
